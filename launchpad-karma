#!/usr/bin/env python3
#
# Author: Alberto Donato <alberto.donato@gmail.com>
#
# This file is part of launchpad-karma.
#
# launchpad-karma is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# launchpad-karma is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with launchpad-karma.  If not, see
# <http://www.gnu.org/licenses/>.

import sys
import os
from collections import namedtuple
from tempfile import mkdtemp
from datetime import datetime, timedelta
from shutil import copy, rmtree
from argparse import ArgumentParser
from configparser import ConfigParser
from calendar import monthrange
from subprocess import check_output
import json
import math
from sqlite3 import connect, PARSE_DECLTYPES

from jinja2 import Environment, FileSystemLoader

from launchpadlib.launchpad import Launchpad
from launchpadlib.uris import LPNET_SERVICE_ROOT

NAME = os.path.basename(__file__)

DIR = os.path.dirname(__file__)
SRC_DIR = os.path.join(DIR, 'src')
# Configuration file
CONFIG_FILE = os.path.join(DIR, '{}.ini'.format(NAME))
# Database file
DB_FILE = os.path.join(DIR, 'karma.sqlite')
# CSS file for HTML page
CSS_FILE = os.path.join(SRC_DIR, 'style.css')

# The base number of steps for the graph Y-axis. The actual number can be
# larger if needed to avoid clipping.
BASE_GRAPH_STEPS = 10


GraphScale = namedtuple('GraphScale', ('min', 'max', 'step_width'))


class MissingConfig(Exception):
    """Missing configuration option."""


class NotConnected(Exception):
    """Not connected to the database"""


class Database:
    """SQLite3 database wrapper."""

    def __init__(self, filename):
        self._filename = filename
        self._conn = None
        self._cur = None

    def __enter__(self):
        self.connect()
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        self.close()

    def connect(self):
        """Connect to the database."""
        must_create = not os.path.exists(self._filename)
        self._conn = connect(self._filename, detect_types=PARSE_DECLTYPES)
        self._cur = self._conn.cursor()
        if must_create:
            self._create()

    def add_karma(self, date, value):
        """Add value for the specified date."""
        self._execute(
            'INSERT OR REPLACE INTO karma (date, value) VALUES (?, ?)',
            [date, value])

    def get_karma(self, start=None, end=None):
        """Return karma, optionally for the specified date range."""
        where_clause, args = self._get_date_range_clause(start=start, end=end)
        if where_clause:
            where_clause = 'WHERE ' + where_clause
        query = 'SELECT date, value FROM karma {} ORDER BY DATE ASC'.format(
            where_clause)
        return self._execute(query, args)

    def get_karma_extremes(self, start=None, end=None):
        """Return minimum and maximum for karma, as (date, value) tuples."""
        where_clause, args = self._get_date_range_clause(start=start, end=end)
        if where_clause:
            where_clause = 'WHERE ' + where_clause
        select_clause = 'SELECT date, value FROM karma'
        min_query = ' '.join(
            [select_clause, where_clause,
             'ORDER BY value ASC, date DESC LIMIT 1'])
        max_query = ' '.join(
            [select_clause, where_clause,
             'ORDER BY value DESC, date DESC LIMIT 1'])
        min_value = self._execute(min_query, args)[0]
        max_value = self._execute(max_query, args)[0]
        return min_value, max_value

    def close(self):
        """Close db connection."""
        if not self._conn:
            raise NotConnected()
        self._conn.close()
        self._conn = None
        self._cur = None

    def _create(self):
        """Create database tables."""
        self._execute(
            'CREATE TABLE karma ('
            '  date DATE PRIMARY KEY,'
            '  value INTEGER NOT NULL)')

    def _execute(self, statement, args=None):
        """Execute a query"""
        if not self._conn:
            raise NotConnected()

        with self._conn:
            if args is None:
                self._cur.execute(statement)
            else:
                self._cur.execute(statement, args)
            return self._cur.fetchall()

    def _get_date_range_clause(self, start=None, end=None):
        """Return a WHERE clause for the date range."""
        args = []
        clauses = []
        if start:
            clauses.append('date >= ?')
            args.append(start)
        if end:
            clauses.append('date <= ?')
            args.append(end)
        return ' AND '.join(clauses), args


def log(message):
    """Log a message to stderr."""
    sys.stderr.write(message + '\n')


def get_user_karma(user):
    """Return the karma for a user."""
    tempdir = mkdtemp(prefix='{}-'.format(NAME))
    lp = Launchpad.login_anonymously(
        NAME, service_root=LPNET_SERVICE_ROOT,
        launchpadlib_dir=tempdir)
    karma = lp.people[user].karma
    rmtree(tempdir, ignore_errors=True)
    return karma


def today():
    """Return the current date as a 'YYYY-MM-DD' string."""
    return datetime.utcnow().date().isoformat()


def format_date(date):
    """Convert date to string."""
    return date.strftime('%e %B %Y').strip()


def get_month_ranges(months):
    """Return date ranges for the specified of months back.

    Return a 3-tuple with (min-date, max-date, ranges).
    """
    ranges = []
    max_date = end = datetime.utcnow().date()
    start = end.replace(day=1)
    ranges.append((start, end))

    for x in range(months - 1):
        end = start - timedelta(days=1)
        start = end.replace(day=1)
        ranges.append((start, end))

    return start, max_date, ranges


def get_graph_data(db, ranges):
    """Return data for graphs."""
    graphs = []
    for start, end in ranges:
        values = db.get_karma(start=start, end=end)
        if not values:
            continue

        day_values = {date.day: value for date, value in values}
        _, last_day_of_month = monthrange(start.year, start.month)

        x = list(range(1, last_day_of_month + 1))
        y = [day_values.get(day) for day in x]

        month_of_year = '{:04d}-{:02d}'.format(start.year, start.month)
        log('Collected data for {}'.format(month_of_year))
        graphs.append(
            {'id': 'graph-{}'.format(month_of_year),
             'label': start.strftime('%B %Y'),
             'x': x,
             'y': y})
    return graphs


def get_graph_y_scale(graphs, min_y, max_y):
    """Return graph Y axis scale details based on values from all graphs."""
    step_width = max((max_y - min_y) / BASE_GRAPH_STEPS, BASE_GRAPH_STEPS)
    width_base = 10 ** int(math.log10(step_width))
    step_width = int(step_width / width_base) * width_base

    min_value = int(min_y / step_width) * step_width
    max_value = int(max_y / step_width) * step_width + step_width
    return GraphScale(min_value, max_value, step_width)


def generate_page(user, target_dir, graphs, y_scale, extremes, git_revision,
                  local=False):
    """Generate the HTML page for graphs."""
    log('Output directory: {}'.format(target_dir))
    if not os.path.isdir(target_dir):
        os.makedirs(target_dir)

    environment = Environment(loader=FileSystemLoader(SRC_DIR))
    environment.filters['json'] = json.dumps
    html_template = environment.get_template('template.html')
    js_template = environment.get_template('template.js')
    context = {
        'user': user,
        'resource_proto': 'https:' if local else '',
        'graph_config': {
            'y_axis': {
                'min': y_scale.min,
                'max': y_scale.max,
                'step_width': y_scale.step_width}},
        'graphs': graphs,
        'extremes': {
            'min': {
                'date': format_date(extremes[0][0]),
                'value': extremes[0][1]},
            'max': {
                'date': format_date(extremes[1][0]),
                'value': extremes[1][1]}},
        'git_revision': git_revision}
    log('Rendering HTML template')
    with open(os.path.join(target_dir, 'index.html'), 'w') as fd:
        fd.write(html_template.render(context))
    log('Rendering JavaScript template')
    with open(os.path.join(target_dir, 'plot.js'), 'w') as fd:
        fd.write(js_template.render(context))
    copy(CSS_FILE, target_dir)


def get_parser():
    """Return a command line parser"""
    parser = ArgumentParser(
        description='Collect and graph user karma from Launchpad.')
    parser.add_argument(
        '--no-update', action='store_true',
        help='don\'t update karma database')
    parser.add_argument(
        '--no-generate', action='store_true',
        help='don\'t generate graphs')
    parser.add_argument(
        '--local', action='store_true',
        help=('Set protocol for web resources so that generated page can '
              'be viewed locally (for development).'))
    return parser


def get_config():
    """Return configuration options."""
    defaults = {
        'months': 12,
        'target-dir': 'output'}
    parser = ConfigParser(defaults=defaults)
    parser.read(CONFIG_FILE)
    config = parser.defaults()
    config['months'] = int(config['months'])
    if 'user' not in config:
        raise MissingConfig('Key "user" must be present in config')
    return config


def get_git_hash():
    """Try to get the git revision"""
    try:
        output = check_output(['git', 'rev-parse', 'HEAD'])
        return output.decode('utf-8').strip()
    except Exception:
        # Don't fail on exceptions
        return None


def main():
    args = get_parser().parse_args()
    config = get_config()

    log('Accessing SQLite database {}'.format(DB_FILE))
    with Database(DB_FILE) as db:
        if not args.no_update:
            date = today()
            karma = get_user_karma(config['user'])
            db.add_karma(date, karma)
            log(
                'Karma for user {} on {} is {}'.format(
                    config['user'], date, karma))

        if not args.no_generate:
            _, _, ranges = get_month_ranges(config['months'])
            graphs = get_graph_data(db, ranges)
            karma_extremes = db.get_karma_extremes()
            extreme_values = tuple(zip(*karma_extremes))[1]
            y_scale = get_graph_y_scale(graphs, *extreme_values)
            git_revision = get_git_hash()
            generate_page(
                config['user'], config['target-dir'], graphs, y_scale,
                karma_extremes, git_revision, local=args.local)


if __name__ == '__main__':
    main()
