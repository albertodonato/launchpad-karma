#!/usr/bin/env python3
#
# This file is part of launchpad-karma.
#
# launchpad-karma is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# launchpad-karma is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with launchpad-karma.  If not, see
# <http://www.gnu.org/licenses/>.

import sys
import os
from tempfile import mkdtemp
from datetime import datetime, timedelta
from argparse import ArgumentParser

from sqlite3 import connect, PARSE_DECLTYPES
from matplotlib import pyplot
from launchpadlib.launchpad import Launchpad


LP_USER = 'ack'
MONTHS = 12
TARGET_DIR = 'out'


def get_parser():
    parser = ArgumentParser('Collect and graph user karma from Launchpad.')
    parser.add_argument(
        '-v', '--verbose', action='store_true', help='verbose output')
    parser.add_argument(
        '--no-update', action='store_true',
        help='don\'t update karma database')
    parser.add_argument(
        '--no-generate', action='store_true',
        help='don\'t generate graphs')
    return parser


class NotConnected(Exception):
    '''Not connected to the database'''


class Database:
    '''SQLite3 database wrapper.'''

    def __init__(self, filename):
        self._filename = filename
        self._conn = None
        self._cur = None

    def connect(self):
        '''Connect to the database.'''
        must_create = not os.path.exists(self._filename)
        self._conn = connect(self._filename, detect_types=PARSE_DECLTYPES)
        self._cur = self._conn.cursor()
        if must_create:
            self._create()

    def add_karma(self, date, value):
        '''Add value for the specified date.'''
        self._execute(
            'INSERT INTO karma (date, value) VALUES (?, ?)', [date, value])

    def get_karma(self, start=None, end=None):
        '''Return karma, optionally for the specify date range.'''
        query = 'SELECT date, value FROM karma'
        args = []
        if start:
            query += ' WHERE date >= ?'
            args.append(start)
        if end:
            if start:
                query += ' AND'
            query += ' date <= ?'
            args.append(end)
        query += ' ORDER BY date ASC'
        return self._execute(query, args)

    def close(self):
        '''Close db connection.'''
        if not self._conn:
            raise NotConnected()
        self._conn.close()
        self._conn = None
        self._cur = None

    def _create(self):
        '''Create database tables.'''
        self._execute(
            'CREATE TABLE karma ('
            '  date DATE NOT NULL,'
            '  value INTEGER NOT NULL)')

    def _execute(self, statement, args=None):
        '''Execute a query'''
        if not self._conn:
            raise NotConnected()

        with self._conn:
            if args is None:
                self._cur.execute(statement)
            else:
                self._cur.execute(statement, args)
            return self._cur.fetchall()


def log(message):
    '''Log a message to stderr'''
    sys.stderr.write(message + '\n')


def plot_karma(data, title, filename):
    '''Plot a list of (day, value) karma datapoints.'''
    x, y = zip(*data)
    pyplot.plot(x, y)
    pyplot.xlabel('Date')
    pyplot.ylabel('Karma')
    pyplot.title(title)
    pyplot.xlim((1, data[-1][0]))
    pyplot.savefig(filename)
    pyplot.close()


def get_user_karma(user):
    '''Return the karma for a user.'''
    lp = Launchpad.login_anonymously('launchpadlib', 'production', mkdtemp())
    return lp.people[user].karma


def today():
    '''Return the current date as a 'YYYY-MM-DD' string.'''
    return datetime.utcnow().date().isoformat()


def get_month_ranges(count=12):
    '''Return date ranges for the specified of months back'''
    ranges = []
    end = datetime.utcnow().date()
    start = end.replace(day=1)
    ranges.append((start, end))

    for x in range(count - 1):
        end = start - timedelta(days=1)
        start = end.replace(day=1)
        ranges.append((start, end))

    return ranges


def generate_plots(db, user, target_dir):
    '''Generate plots in the specified directory.'''
    filenames = []
    if not os.path.exists(target_dir):
        os.makedirs(target_dir)

    for start, end in get_month_ranges():
        values = db.get_karma(start=start, end=end)
        values = [(x.day, y) for x, y in values]
        if not values:
            continue

        log('Generating monthly plot for {}-{:02d}'. format(
            start.year, start.month))
        title = start.strftime('%B %Y')
        filename = (
            'karma-{}-{}-{:02d}.png'.format(user, start.year, start.month))
        filenames.append(filename)
        plot_karma(values, title, os.path.join(target_dir, filename))

    return filenames


def generate_page(user, target_dir, filenames):
    """Generate the HTML page for graphs."""
    pass


def main():
    args = get_parser().parse_args()

    db = Database('karma.sqlite')
    db.connect()

    if not args.no_update:
        date = today()
        karma = get_user_karma(LP_USER)
        db.add_karma(date, karma)
        if args.verbose:
            log('Karma for user {} on {} is {}'.format(LP_USER, today, karma))

    if not args.no_generate:
        filenames = generate_plots(db, LP_USER, TARGET_DIR)
        generate_page(LP_USER, TARGET_DIR, filenames)

    db.close()


if __name__ == '__main__':
    main()
